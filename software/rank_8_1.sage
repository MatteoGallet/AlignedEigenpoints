## Here we consider the case:
## P1 = (1, 0, 0) and we want to see under which conditions 
## Phi(P1, ..., P5) has rank < 9 (P2, P3, P4, P5 are generic)
## The concluision is that either P1, P1, P3, P4, P5 are such that,
## up to a permutation of the indeces, P1+P2 and P1+P4 are tangent
## to the isotropic conic in, respectrively, P2 and P4, 
## or the five points satisfy the conditions:
## delta1(P1, P2, P4)=0, delta1b(P1, P2, P3)=0, delta1b(P1, P4, P5)=0

varAn1 = ["s"+str(i)+str(j) for i in range(1,8) for j in range(i, 8)]
varAn2 = ["x", "y", "z", "u1", "u2", "v1", "v2", "w1", "w2", "l1", "l2"]
varAn3 = ["a"+str(i) for i in range(10)]
varAn4 = [str(XX)+str(i) for i in range(1, 8) for XX in ["A", "B", "C"]]
var("xx")
K = QQ
K.<ii> = NumberField(xx^2+1)
S = PolynomialRing(K, varAn1+varAn2+varAn3+varAn4)
S.inject_variables(verbose=false)

P1 = vector(S, (A1, B1, C1))

load("auxiliaryProcedures.sage")

P1 = vector((1, 0, 0))
P2 = vector(S, (A2, B2, C2))
P4 = vector(S, (A4, B4, C4))
P3 = u1*P1+u2*P2
P5 = v1*P1+v2*P4

load("../AlignedEigenpoints/software/ancillary.sage")

test = SymbolicCheck()

# Construction of the matrix of all the linear conditions.

M1 = test.condition_matrix([P1, P2, P3, P4, P5], S, standard="all")

## Since the first three rows of M1 are, respectively,
## (0, 1, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 1, 0, 0, 0, 0, 0), and
## (0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
## in order to compute the minors of order 9 of M1, we can compute
## the minors of order 7 of the matrix obtained from the rows 3, 4, ..., 14
## of M1 and all the columns of M1 except columns 1 and 4.
MM = M1.matrix_from_rows_and_columns(range(3, 15), [0, 2, 3, 5, 6, 7, 8, 9])

## Since we have:
assert(tuple(P2[2]*MM[0]-P2[1]*MM[1]+P2[0]*MM[2]) == (0, 0, 0, 0, 0, 0, 0, 0))
assert(tuple(P3[2]*MM[3]-P3[1]*MM[4]+P3[0]*MM[5]) == (0, 0, 0, 0, 0, 0, 0, 0))
assert(tuple(P4[2]*MM[6]-P4[1]*MM[7]+P4[0]*MM[8]) == (0, 0, 0, 0, 0, 0, 0, 0))
assert(tuple(P5[2]*MM[9]-P5[1]*MM[10]+P5[0]*MM[11]) == (0, 0, 0, 0, 0, 0, 0, 0))

## a square submatrix of order 7 of MM has surely determinant zero if
## it contains the three rows 0, 1, 2 or the three rows 3, 4, 5 or the
## three rows 6, 7, 8 or the three rows 9, 10, 11. Hence we construct
## all the submatrix of MM or order seven which do not contain these
## these triplets of rows.

rg = Combinations(12, 7).list()

## given a list of (seven) rows st, the method checks if it
## contains the triplet 0, 1, 2 or ...
def is_min_sure_zero(st):
    return(Set([0, 1, 2]).issubset(Set(st)) or\
           Set([3, 4, 5]).issubset(Set(st)) or\
           Set([6, 7, 8]).issubset(Set(st)) or\
           Set([9, 10, 11]).issubset(Set(st)))

## select the "good" rows
rg1 = list(filter(lambda uu: not is_min_sure_zero(uu), rg))

## select the "good" columns
cl1 = Combinations(8, 7).list()

print("First 'long' computation: computation of minors of order 7 (30'):")
ttA = cputime()
min7 = []
for rr in rg1:
    for cc in cl1:
        min7.append(MM.matrix_from_rows_and_columns(rr, cc).det())
print(cputime()-ttA)
print()


sleep(1)

min7 = list(filter(lambda uu: uu != 0, min7))

print("Possible 'long' computation: computation of squarefree polynomials (30')")
ttA = cputime()
min7s = [test.get_sqrfree(mm) for mm in min7]
print(cputime()-ttA)
print()


sleep(1)

print("Possible 'long' computation: saturation w.r.t. u and v")
ttA = cputime()
min7ss = [test.clear_uv(mm) for mm in min7s]
print(cputime()-ttA)
print()

sleep(1)

J1 = S.ideal(min7ss)
pt = [P1, P2, P3, P4, P5]
for i in range(4):
    for j in range(i+1, 5):
        J1 = J1.saturation(S.ideal(matrix([pt[i], pt[j]]).minors(2)))[0]

J1 = J1.saturation(matrix([P1, P2, P4]).det())[0]

PD = J1.radical().primary_decomposition()

## we get that PD has 9 ideals:
assert(len(PD) == 9)

## of these ideals, 8 are already known, since are the following:
assert(PD[0] == S.ideal(B4 + (-ii)*C4, B2 + ii*C2, v2*A4 + v1, u2*A2 + u1))
assert(PD[1] == S.ideal(B4 + ii*C4, B2 + (-ii)*C2, v2*A4 + v1, u2*A2 + u1))
assert(PD[2] == S.ideal(B4 + (-ii)*C4, A4, B2 + ii*C2, u2*A2 + u1))
assert(PD[3] == S.ideal(B4 + ii*C4, A4, B2 + (-ii)*C2, u2*A2 + u1))
assert(PD[4] == S.ideal(B4 + (-ii)*C4, B2 + ii*C2, A2, v2*A4 + v1))
assert(PD[5] == S.ideal(B4 + ii*C4, B2 + (-ii)*C2, A2, v2*A4 + v1))
assert(PD[6] == S.ideal(B4 + (-ii)*C4, A4, B2 + ii*C2, A2))
assert(PD[7] == S.ideal (B4 + ii*C4, A4, B2 + (-ii)*C2, A2))

## and these ideals correspond to the case in which the lines P1+P2
## and P1+P4 are tangent to the isotropic conic in, respectrively, 
## (P2 or P3) and (P4 or P5).

## There is a final ideal in the primary decomposition which is 
## the ideal generated by 
##  delta1(P1, P2, P4), delta1b(P1, P2, P3), delta1b(P1, P4, P5)

assert(PD[8] == S.ideal(delta1(P1, P2, P4), \
       delta1b(P1, P2, P3), delta1b(P1, P4, P5)))

## conclusion.
print("""CONCLUSION: In order to have rank < 9 we have two possibilities: 
either the line P1+P2 is tangent to the isotropic conic in P2 (up to 
a permutation of the indices 2 and 3) and the line P1+P4 is tangent to the 
isotropic conic in P4 (up to a permutation of the indices 4 and 5), 
or the five points satisfy the equations:

    delta1(P1, P2, P4)=0, delta1b(P1, P2, P3)=0, delta1b(P1, P4, P5)=0
""")


### Now we study the case in which the condition:
### delta1(P1, P2, P4)=0, delta1b(P1, P2, P3)=0, delta1b(P1, P4, P5)=0
### is satisfied. This is done in file 
### three_deltas.sage
